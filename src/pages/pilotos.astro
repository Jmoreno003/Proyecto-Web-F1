---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import '../styles/pilotos.css';
import background from '../assets/fondopilotos.jpg';

const pilotos = await getCollection('pilotos');
const { idpilotos } = Astro.params;

---

<Layout title="F1 Time üèéÔ∏è">
    <img id="background" src={background.src} alt="" fetchpriority="high" />
    <header class="header">
        <div class="title-container">
            <h1>Pilotos</h1>
        </div>

        <!-- Bot√≥n de men√∫ -->
        <button id="menu-icon">‚ò∞</button>

        <!-- Contenedor de botones -->
        <div id="menu-items" class="buttons-container">
            <a href="/circuitos" class="menu-button">Circuitos</a>
            <a href="/pilotos" class="menu-button">Pilotos</a>
            <a href="/escuderias" class="menu-button">Escuder√≠as</a>
            <a href="/puntos" class="menu-button">Puntos</a>
        </div>
    </header>
    <main>

        <div class="pilotos">
            {
                pilotos.map(piloto => {
                    const { id, data } = piloto;
                    const { imgcard, nombre, apellido } = data;
                    
                    return (
                        <a href={`/pilotos/${id}`} class="piloto-card" data-id={id}>
                            <img
                                transition:name={`img-${id}`}
                                src={imgcard}  
                                alt={`Tarjeta del piloto ${nombre} ${apellido}`} 
                                class="piloto-image" 
                            />
                        </a>
                    );
                })
            }
        </div>  
        
        <div class="pilotos-mostrar">
            {
                pilotos.map(piloto => {
                    const { id, data } = piloto;
                    const { imgbig, nombre, apellido } = data;
                    
                    return (
                        <a href={`/pilotos/${id}`} class="piloto-big-card" data-id={`piloto-big-${id}`}>
                            <img 
                                transition:name={`image-${id}`}  
                                src={imgbig}  
                                alt={`${nombre} ${apellido}`} 
                                loading="lazy" 
                                class="piloto-image" 
                                decoding="async" 
                            />
                            <div class="piloto-info">
                                <h2 class="piloto-name">{nombre} {apellido}</h2>
                            </div>
                        </a>
                    );
                })
            }
        </div>
    </main>

    <script>

        // Inicializar el comportamiento del men√∫
        function initializeMenu() {
            const menuIcon = document.getElementById('menu-icon');
            const menuItems = document.getElementById('menu-items');

            if (menuIcon && menuItems) {
                menuIcon.addEventListener('click', () => {
                    // Alternar la visibilidad del men√∫
                    if (menuItems.style.display === 'flex') {
                        menuItems.style.display = 'none';
                    } else {
                        menuItems.style.display = 'flex';
                    }
                });
            }
        }

        // Ejecutar la funci√≥n al cargar la p√°gina
        document.addEventListener('DOMContentLoaded', initializeMenu);

        // Interceptar clics en los enlaces y recargar antes de redirigir
        const menuButtons = document.querySelectorAll('.menu-button');
        menuButtons.forEach((button) => {
            button.addEventListener('click', (event) => {
                event.preventDefault(); // Prevenir la navegaci√≥n inmediata
                const href = button.getAttribute('href'); // Obtener el destino
                if (href) {
                    window.location.href = href; // Redirigir despu√©s de recargar
                }
            });
        });

        // Inicializar el comportamiento de los pilotos
        document.addEventListener('astro:after-swap', () => {
            initializePilotos();
        });

        document.addEventListener('DOMContentLoaded', () => {
            initializePilotos();
        });

        function initializePilotos() {
            const pilotCards = document.querySelectorAll('.piloto-card');
            const bigPilots = document.querySelectorAll('.piloto-big-card');

            // Asegurar que todos los pilotos grandes est√©n ocultos al inicio
            bigPilots.forEach(pilot => pilot.classList.add('hidden'));

            let currentPilotoId: string | null = null;

            pilotCards.forEach((singlePilotCard) => {
                singlePilotCard.addEventListener('mouseenter', () => {
                    const id = singlePilotCard.getAttribute('data-id');

                    if (id) {
                        const event = new CustomEvent("piloto-hovered", { detail: { id } });
                        document.dispatchEvent(event);
                    }
                });
            });

            document.addEventListener("piloto-hovered", (event) => {
                const customEvent = event as CustomEvent<{ id: string }>;
                const id = customEvent.detail.id;

                if (currentPilotoId === id) return;

                // Ocultar todos los pilotos antes de mostrar el nuevo
                bigPilots.forEach(pilot => pilot.classList.add('hidden'));

                // Mostrar solo el piloto correspondiente
                document.querySelector(`[data-id="piloto-big-${id}"]`)?.classList.remove('hidden');

                currentPilotoId = id;
            });

            // Reseteamos el estado al volver atr√°s
            window.addEventListener("popstate", () => {
                bigPilots.forEach(pilot => pilot.classList.add('hidden'));
                currentPilotoId = null;
            });
        }
    </script>
</Layout>